{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Child","App","useState","show","showload","products","setproducts","cproducts","setcproducts","productindex","setproductindex","getbutton","setbuttonshow","useEffect","axios","get","then","res","tenproducts","data","slice","console","log","class","length","onClick","map","item","src","thumbnailUrl","title","nextindex","updateproducts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAgFMA,EAAQ,WACZ,OAAS,8BACP,kDAqFWC,EAnKH,WACV,MAAuBC,oBAAS,GAAhC,mBAAMC,EAAN,KAAWC,EAAX,KACA,EAA8BF,mBAAS,IAAvC,mBAAMG,EAAN,KAAeC,EAAf,KACA,EAAiCJ,mBAAS,IAA1C,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAsCN,mBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAiCR,oBAAS,GAA1C,mBAAMS,EAAN,KAAgBC,EAAhB,KAKAC,qBAAU,WAYRC,IAAMC,IAAI,+CACTC,MAAK,SAAAC,GAEE,IAAMC,EAAcD,EAAIE,KAAKC,MAAMX,EAAa,IAChDC,EAAgB,IACjBF,EAAaS,EAAIE,MACjBb,EAAYY,QAGlB,IAEHL,qBAAU,WAERQ,QAAQC,IAAI,mDAgBd,OACE,gCACGnB,GAAQ,qBAAIoB,MAAM,YAAV,8BAAwClB,EAASmB,UAC1D,wBAAQC,QAhDO,WAEjBrB,GAAUD,IA8CR,uBACA,uBACA,2CACA,cAAC,EAAD,IACA,qBAAKoB,MAAM,YAAX,SACClB,EAASmB,QAAUnB,EAASqB,KAAI,SAACC,GAAD,OAC/B,sBAAKJ,MAAM,OAAX,UACA,qBAAKA,MAAM,MAAMK,IAAKD,EAAKE,eAC3B,oBAAIN,MAAM,WAAV,SAAsBI,EAAKG,gBAKjCnB,GAAa,wBAAQc,QA9BL,WAEd,IAAMM,EAAYtB,EAAc,EAC1BS,EAAcX,EAAUa,MAAMX,EAAasB,GAC/CrB,EAAgBqB,GAClB,IAAMC,EAAc,sBAAO3B,GAAP,YAAmBa,IACrCc,EAAeR,OAAQ,IAAMlB,EAAY0B,GACvCA,EAAeR,QAAS,IAEzBZ,GAAgBD,IAqBR,kCC3DAsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4efc4750.chunk.js","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const[show,showload] = useState(true)\n  const[products,setproducts] = useState([])\n  const [cproducts,setcproducts] = useState([])\n  const [productindex,setproductindex] =useState(0)\n  const[getbutton,setbuttonshow] = useState(true)\n  const showupdate = ()=>\n  {\n    showload(!show)\n  }\n  useEffect(()=>\n  {\n    // fetch('https://jsonplaceholder.typicode.com/photos')\n    //   .then(response => response.json())\n    //   .then(json =>\n    //     {\n    //       const tenproducts = json.slice(productindex,10);\n    //       setproductindex(11)\n    //      setcproducts(json)\n    //      setproducts(tenproducts)\n    //   })\n    // }\n    axios.get(\"https://jsonplaceholder.typicode.com/photos\")\n    .then(res =>\n          {\n            const tenproducts = res.data.slice(productindex,10);\n            setproductindex(11)\n           setcproducts(res.data)\n           setproducts(tenproducts)\n        })\n      }\n    ,[])\n  \n  useEffect(()=>\n  {\n    console.log(\"compunent did mount and component did update\")\n  })\n  const getload = () =>\n  {\n    const nextindex = productindex+ 9\n    const tenproducts = cproducts.slice(productindex,nextindex)\n      setproductindex(nextindex)    \n    const updateproducts = [...products,...tenproducts]\n     {updateproducts.length <50 && setproducts(updateproducts)}\n     if(updateproducts.length >=50)\n     {\n       setbuttonshow(!(getbutton))\n     }\n    \n  }\n \n  return (  \n    <div>\n      {show && <h1 class=\"cardcount\">helllo app count {products.length}</h1>}\n      <button onClick = {showupdate}>show/hide</button>\n      <hr/>\n      <button>count</button>\n      <Child/>\n      <div class=\"flexitems\">\n      {products.length && products.map((item) =>\n        <div class=\"card\">\n        <img class=\"img\" src={item.thumbnailUrl}/>\n        <h1 class=\"headcard\">{item.title}</h1>\n      </div>\n      )}\n      </div>\n \n {getbutton && <button onClick= {getload}>show more images</button>}\n\n\n\n\n    </div>\n  );\n}\n \nconst Child = () => {\n  return ( <div>\n    <h1>this is child</h1>\n  </div> );\n}\n \n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       showload : true,\n//       products :[],\n//       count  :0\n//       }\n//   }\n//   componentDidMount()\n//   {\n//     setTimeout(() =>{\n//     fetch('https://jsonplaceholder.typicode.com/todos')\n//   .then(response => response.json())\n//   .then(json => this.setState({products : json,showload : false}))\n//   },5000);\n// }\n// shouldComponentUpdate(nextProps,nextState)\n// {\n// if(nextState.count <6)\n// {\n//   return true\n// }\n// else{\n//   return false\n// }\n// }\n//   render() { \n//     const {showload,count,products} = this.state;\n//     return (<div>\n//       {showload  && <h1>loading...</h1> }\n//       <h1>count value {this.state.count}</h1>\n//       <button onClick = {() => this.setState({count : this.state.count+1})}>count</button>\n//      {/* {products.length && products.map((item) => <h1>{item.title}</h1>)} */}\n\n//       <Child count = {count}/>\n//     </div>\n//         );\n//   }\n// }\n\n// class Child extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       count : 0\n//       }\n//   }\n//   shouldComponentUpdate(nextProps,nextState)\n//   {\n//     if(nextProps.count <=3)\n//     {\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   shouldComponentUpdate(nextProps,nextState)\n//   {\n//     if(nextState.count >=0 && nextState.count <= 10)\n//     {\n//       return true\n//     }\n//     else{\n//       return false\n//     }\n//   }\n//   render() { \n//     return ( <div>\n//       <h1>this is child and the count is {this.state.count}</h1>\n//       <button onClick = {() => this.setState({count : this.state.count+1})}>increment </button>\n//       <button onClick = {() => this.setState({count : this.state.count -1})}>decrement</button>\n//     </div> );\n//   }\n// }\n \n\n\n\nexport default App;\n// import React, { Component, useState } from 'react';\n// import Topbar from \"./components/topbar\"\n// import {apidata} from './components/catalog';\n// import Content from './components/catalogs';\n// import RenderCards from \"./components/rendercards\"\n\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { \n//       cartproducts : []\n//      }\n//   }\n//   render() { \n//     const {catalogEntryView,...restdata} = apidata;\n//     return (  \n//       <div className=\"App\">\n    \n//     <Topbar cartcount = {this.state.cartproducts.length}/>\n//     <div className = \"cards\">\n//      {catalogEntryView.map((item) =>\n//            <Content item = {item} addproduct = { (product)=> {\n            \n//              this.setState({cartproducts : [...this.state.cartproducts,product]})} }/>)}\n//   </div>\n    \n\n//     </div>\n//     );\n//   }\n// }\n \n// export default App;\n\n\n\n// function App() {\n//   console.log(apidata)\n//   const {catalogEntryView,...restdata} = apidata;\n//   const [cartproducts,productdata] = useState([])\n//   const [setvalue,setupdatevalue] = useState(true)\n//   var rendercardsdata = catalogEntryView\n//   const updatecart = (product) =>\n//   {\n//     let check = cartproducts.length > 0 && cartproducts.findIndex((item) => item.uniqueID === product.uniqueID)\n//   if(cartproducts.length && check !== -1)\n//   {\n//     cartproducts[check].quantity = cartproducts[check].quantity + 1\n//     productdata(cartproducts) \n//   }\n//   else{\n//     product.quantity = 1\n//     productdata([...cartproducts,product])  \n//   }\n//   }\n  \n    \n//   const ascending = () =>\n  \n//   {\n//     setupdatevalue(!setvalue)\n   \n//   }\n  \n  \n//   return (\n//     <div className=\"App\">\n//       <Topbar cartcount = {cartproducts.length}/>\n//     <button onClick = {ascending}>Pric by</button>\n//    {setvalue && <div className = \"cards\">\n//     {catalogEntryView.map((item) =>\n//            <Content item = {item} addproduct = {updatecart}/>)}\n//   </div>}\n \n    \n\n//     </div>\n//   );\n// }\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}